/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_tanso_rfidlib_port_uart_NativeUart */
#include <termios.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>

#include "com_tanso_rfidlib_port_uart_NativeUart.h"

static const char *TAG = "serial_port";

#define LOGD(fmt, args...)      printf(fmt, ##args)
#define LOGE(fmt, args...)      printf(fmt, ##args)

/**
 * 主要的
 * @return
 */
int main() {
    printf("Check Uarts\r\n");
    return 0;
}

#ifdef __cplusplus
extern "C" {
#endif

/**
 * 获取波特率
 */
static speed_t getBaudrate(jint baudrate) {
    switch (baudrate) {
        case 0:
            return B0;
        case 50:
            return B50;
        case 75:
            return B75;
        case 110:
            return B110;
        case 134:
            return B134;
        case 150:
            return B150;
        case 200:
            return B200;
        case 300:
            return B300;
        case 600:
            return B600;
        case 1200:
            return B1200;
        case 1800:
            return B1800;
        case 2400:
            return B2400;
        case 4800:
            return B4800;
        case 9600:
            return B9600;
        case 19200:
            return B19200;
        case 38400:
            return B38400;
        case 57600:
            return B57600;
        case 115200:
            return B115200;
        case 230400:
            return B230400;
        case 460800:
            return B460800;
        case 500000:
            return B500000;
        case 576000:
            return B576000;
        case 921600:
            return B921600;
        case 1000000:
            return B1000000;
        case 1152000:
            return B1152000;
        case 1500000:
            return B1500000;
        case 2000000:
            return B2000000;
        case 2500000:
            return B2500000;
        case 3000000:
            return B3000000;
        case 3500000:
            return B3500000;
        case 4000000:
            return B4000000;
        default:
            return (speed_t) - 1;
    }
}

/**
 * Class:     com_tanso_rfidlib_port_uart_NativeUart
 * Method:    open
 * Signature: (Ljava/lang/String;II)Ljava/io/FileDescriptor;
 */
JNIEXPORT jobject
JNICALL Java_com_tanso_rfidlib_port_uart_NativeUart_open(JNIEnv *env, jclass thiz, jstring path, jint baudrate,
                                                         jint flags) {
    int fd;
    speed_t speed;
    jobject mFileDescriptor;

    /* Check arguments */
    {
        //  计算波特率
        speed = getBaudrate(baudrate);
        if (speed == -1) {
            LOGE("ERROR : Invalid baudrate (%d)\r\n", baudrate);
            return NULL;
        }
    }

    /* Opening device */
    {
        jboolean iscopy;

        //  获取字符串
        const char *path_utf = (env)->GetStringUTFChars(path, &iscopy);

        LOGD("Opening Serial Port(%s) With Baud(%d) And Flags(0x%x)\r\n", path_utf, baudrate, O_RDWR | flags);

        //  打开设备
        fd = open(path_utf, O_RDWR | flags);

        LOGD("open() fd = %d\r\n", fd);

        //  释放字符串
        (env)->ReleaseStringUTFChars(path, path_utf);

        //  打开是否成功?
        if (fd == -1) {
            LOGE("ERROR : Cannot open port!\r\n");
            return NULL;
        }
    }

    /* Configure device */
    {
        struct termios cfg;

        LOGD("Configuring serial port\r\n");

        if (tcgetattr(fd, &cfg)) {
            LOGE("tcgetattr() failed\r\n");

            close(fd);
            return NULL;
        }

        cfmakeraw(&cfg);

        //  设置波特率
        cfsetispeed(&cfg, speed);
        cfsetospeed(&cfg, speed);

        //  失败退出
        if (tcsetattr(fd, TCSANOW, &cfg)) {
            LOGE("tcsetattr() failed\r\n");
            close(fd);
            return NULL;
        }
    }

    /* Create a corresponding file descriptor */
    {
        //  类型
        jclass cFileDescriptor = (env)->FindClass("java/io/FileDescriptor");
        //  方法
        jmethodID iFileDescriptor = (env)->GetMethodID(cFileDescriptor, "<init>", "()V");
        //  属性
        //jfieldID descriptorID = (env)->GetFieldID(cFileDescriptor, "descriptor", "I");
        jfieldID descriptorID = (env)->GetFieldID(cFileDescriptor, "fd", "I");
        //  创建
        mFileDescriptor = (env)->NewObject(cFileDescriptor, iFileDescriptor);
        //  赋值
        (env)->SetIntField(mFileDescriptor, descriptorID, (jint) fd);
    }

    //  返回对象
    return mFileDescriptor;
}

/**
 * Class:     Java_com_tanso_rfidlib_port_uart_ManagerUART_close
 * Method:    close
 * Signature: ()V
 *              com.tanso.rfidlib.port.uart
 */
JNIEXPORT void JNICALL Java_com_tanso_rfidlib_port_uart_NativeUart_close(JNIEnv *env, jclass thiz, jobject fd) {

    //  类型
    jclass FileDescriptorClass = (env)->FindClass("java/io/FileDescriptor");

    //  字段
    jfieldID descriptorID = (env)->GetFieldID(FileDescriptorClass, "descriptor", "I");

    //  取值
    jint descriptor = (env)->GetIntField(fd, descriptorID);

    LOGD("close(fd = %d)", descriptor);

    //  关闭
    close(descriptor);
}

#ifdef __cplusplus
}
#endif
